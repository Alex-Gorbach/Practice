@model Journey.WEB.Models.CreateRouteModel

@{
    ViewBag.Title = "CreateRoute";
}

<link type="text/css" rel="stylesheet" href="~/Content/MapStyle.css" />
<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.2.1.min.js"></script>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/moment.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />

<h2>CreateRoute</h2>
@using (Html.BeginForm())
{
<div>
    <div class="form-horizontal" style="width:416px">
        <h4>CreateRouteModel</h4>

    @Html.AntiForgeryToken()
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.StartPoint, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartPoint, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartPoint, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndPoint, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndPoint, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndPoint, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="Waypoints">
        
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Seats, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Seats, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Seats, "", new { @class = "text-danger" })
            </div>
        </div>

 
        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="container">
                    <div class="row">
                        <div class='col-sm-6'>
                            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <script type="text/javascript">
                            $(function () {
                                $('#Date').datetimepicker({format:"DD/MM/YYYY"});
                            });
                        </script>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>
        


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                

                <input type="submit" value="Save route" class="btn btn-default" />
                <input type="button" value="Get route" id="submit" class="btn btn-default">
                <input type="button" id="AddWayPoint" class="btn btn-default" value="Add point">

            </div>
                       
       
        </div>
        <div id="map"></div>
        <div id="directions-panel"></div>
        </div>

  </div>
}



<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script>

    $("#AddWayPoint").on("click", function () {
       
        var waypoints_count = document.getElementsByName("Waypoints").length;
      
        if (waypoints_count<23)
            $(".Waypoints").append('<div class="form-group"><label class="control-label col-md-2" for="WayPoint">Waypoint</label><div class="col-md-10"><input class="form-control text-box single-line" style="matgin-bottom: -16px;" id="Waypoints" name="Waypoints" type="text" value=""></div></div >');
        else
            alert("Невозможно создать больше промежуточных точек")
    });
    $(".DeleteRouteBtn").on("click", function () {
        alert("asdas");
    });


      function initMap() {
          var directionsService = new google.maps.DirectionsService;
          var directionsDisplay = new google.maps.DirectionsRenderer;
          var map = new google.maps.Map(document.getElementById('map'), {
              zoom: 6,
              center: { lat: 41.85, lng: -87.65 }
          });
          directionsDisplay.setMap(map);

          document.getElementById('submit').addEventListener('click', function () {
              calculateAndDisplayRoute(directionsService, directionsDisplay);
          });
      }

      function calculateAndDisplayRoute(directionsService, directionsDisplay) {
          var waypts = [];
          var WayPointArray = [];
          var waypoints_count = document.getElementsByName("Waypoints").length;
          console.log("waypoints_count:"+waypoints_count);
          console.log(document.getElementsByName("Waypoints").length)
          var ss;

          if (waypoints_count != 0) {
              for (var i = 0; i < waypoints_count; i++){

                  WayPointArray.push(document.getElementsByName('Waypoints'));
                  
              }
            
              console.log(WayPointArray);
              console.log(WayPointArray[0][0].value);

              for (var i = 0; i < WayPointArray.length;i++) {
                  
                  waypts.push({
                      location: WayPointArray[i][i].value,
                      stopover: true
                  });
              }
              console.log(waypts);
          }

          directionsService.route({
              origin: document.getElementById('StartPoint').value,

              destination: document.getElementById('EndPoint').value,
              waypoints: waypts,
              optimizeWaypoints: true,
              travelMode: 'DRIVING'
          }, function (response, status) {
              if (status === 'OK') {
                  directionsDisplay.setDirections(response);
                  var route = response.routes[0];
                  var summaryPanel = document.getElementById('directions-panel');
                  summaryPanel.innerHTML = '';
                  // Display information for each route
                  for (var i = 0; i < route.legs.length; i++) {
                      var routeSegment = i + 1;
                      summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                          '</b><br>';
                      summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
                      summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                      summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
                  }
              } else {
                  window.alert('Directions request failed due to ' + status);
              }
          });
      }
</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA9GI2-eH45d9wuipFVjopmSUr98_bCSoc &callback=initMap">
</script>